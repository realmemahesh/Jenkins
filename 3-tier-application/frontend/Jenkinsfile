pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  containers:
  - name: docker
    image: docker:20.10-cli
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
            defaultContainer 'docker'
        }
    }

    parameters {
        string(name: 'ENV', defaultValue: 'dev')
    }

    environment {
        DOCKER_HUB = "iammaheshn"
        IMAGE_NAME = "frontend"
        IMAGE_TAG = "${params.ENV}-${env.BUILD_ID}"
    }

    stages {
        stage("Code checkout") {
            steps {
                script {
                    git credentialsId: 'github_credentials', poll: false, url: 'https://github.com/realmemahesh/Jenkins.git'
                }
            }
        }

        stage("Docker build") {
            steps {
                script {
                    sh "pwd"
                    sh "ls -l"
                    sh "docker --version"
                    sh "docker build -t ${DOCKER_HUB}/${IMAGE_NAME}:${IMAGE_TAG} ./frontend/."
                }
            }
        }

        stage("Docker push") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    script {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                        sh "docker push ${DOCKER_HUB}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage("Deploy to Kubernetes") {
            steps {
                script {
                    echo "Deploying to ${params.ENV}-k8s"
                    sh "sed -i 's/latest/${IMAGE_TAG}/g' frontend/frontend-deployment.yaml"
                    sh "kubectl apply -f frontend/frontend-deployment.yaml"
                }
            }
        }
    }

    post {
        success {
            echo "Build and deployment successful"
        }
        failure {
            echo "Build or deployment failed"
        }
    }
}
